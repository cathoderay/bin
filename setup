#!/bin/bash
#
# File: setup
# Description: setup environment
# Author: Ronald Kaiser <raios DOT catodicos AT gmail DOT com>
#
# TODO: check if perlbrew is installed
# TODO: check if bashmarks is installed

CONF="$HOME/bin/conf"
DOTFILES="$HOME/bin/dotfiles"

. $DOTFILES/bash/config # color codes, etc
. $DOTFILES/bash/aliases # helper functions

task() {
    pbyellow "[$1]"
}

subtask() {
    pbpurple "[$1]"
}

subtask_done() {
    pbgreen "subtask done!"
}

task_done() {
    pbgreen "task done!"
}

set_link() {
    local SRC="$1"
    local TGT="$2"

    if [ -s "$SRC" ]; then
        if [ -L "$SRC" ] && [ "$(readlink $SRC)" = "$TGT" ]; then
            echo -e "\e[0;32m$SRC already configured\e[0m";
            return 0
        fi
        echo -e "\e[0;34m $SRC already exists.\e[0m"
        return 1
    fi
    ln -s $TGT $SRC && echo -e "\e[0;32m$SRC configured!\e[0m"
}

set_ssh() {
    task ssh
    set_link "$HOME/.ssh/config" "$DOTFILES/ssh/config" && task_done
}

set_pathogen() {
    subtask pathogen
    if [ -d ~/.vim/autoload ]; then
        echo -e "\e[0;32mpathogen already configured\e[0m";
        subtask_done
        return 0
    fi
    mkdir -p ~/.vim/autoload &&
    wget http://github.com/tpope/vim-pathogen/raw/master/autoload/pathogen.vim -O ~/.vim/autoload/pathogen.vim &&
    subtask_done
}

set_plugins() {
    subtask plugins
    mkdir -p ~/.vim/bundle &&
    cd ~/.vim/bundle &&
    cat $CONF/plugins.vim | while read line
    do
        local PLUGIN=$($(echo basename $line) | sed 's/\(.*\).git$/\1/g')
        if [ ! -d "$PLUGIN" ]; then
            git clone $line &&
            echo -e "\e[0;32m$PLUGIN configured!\e[0m";
        else
            echo -e "\e[0;32m$PLUGIN already configured\e[0m";
        fi
    done &&
    cd - &&
    subtask_done
}

set_vim() {
    task vim
    set_link "$HOME/.vimrc" "$DOTFILES/vim/vimrc" &&
    set_pathogen &&
    set_plugins &&
    task_done
}

set_git() {
    task git
    set_link "$HOME/.gitconfig" "$DOTFILES/git/gitconfig" && task_done
}

add_line() {
    local LINE="$1"
    local FILE="$2"

    if [ ! -f "$FILE" ]; then
        echo -e "\e[0;34mFile: $FILE does not exist. \e[0m"
        return 1
    fi
    grep "$LINE" "$FILE"
    if [ ! "$?" = 0 ]; then
        echo "$LINE" >> "$FILE"
        if [ "$?" = 0 ]; then
            echo -e "\e[0;32mLine: \"$LINE\" added to $FILE!\e[0m"
        else
            return 1
        fi
    else
        echo -e "\e[0;34mLine: \"$LINE\" already exists in $FILE. \e[0m"
    fi
}

set_bashmarks() {
    task bashmarks
    git clone git://github.com/huyng/bashmarks.git /tmp/bashmarks
    if [ ! "$?" = 0 ]; then
        echo -e "\e[1;31mProblem during repository cloning.\e[0m"
        return 1
    fi

    cd /tmp/bashmarks &&
        make install >/dev/null &&
        add_line ". ~/.local/bin/bashmarks.sh" "$DOTFILES/bashrc" &&
        cd - &&
        rm -rf /tmp/bashmarks &&
        task_done
}

set_bashrc() {
    task bashrc
    touch ~/.bashrc &&
        add_line ". $DOTFILES/bashrc" ~/.bashrc &&
        task_done
}

set_perlbrew() {
    task perlbrew
    curl -kLO http://xrl.us/perlbrew &&
    perl perlbrew self-install &&
    $HOME/perl5/perlbrew/bin/perlbrew init &&
    add_line ". $HOME/perl5/perlbrew/etc/bashrc" "$DOTFILES/bashrc" &&
    rm perlbrew &&
    task_done
}

install_packages() {
    task packages
    uname -v | grep Ubuntu
    if [ "$?" = 0 ]; then
        sudo apt-get install $(cat $CONF/packages.debian) &&
        task_done &&
        return 0
    fi
    echo -e "\e[1;31mDon't know this OS\e[0m"
}

print_help() {
    echo "Usage: $(basename $0) [OPTIONS]

OPTIONS:
    -a, --all
    -r, --bashrc
    -v, --vim
    -s, --ssh
    -g, --git
    -k, --bashmarks
    -b, --perlbrew
    -p, --packages
    -h, --help"
}

while [ -n "$1" ]
do
    case $1 in
        -r | --bashrc) set_bashrc ;;
        -s | --ssh) set_ssh ;;
        -v | --vim) set_vim ;;
        -g | --git) set_git ;;
        -k | --bashmarks) set_bashmarks ;;
        -b | --perlbrew) set_perlbrew ;;
        -p | --packages) install_packages ;;
        -a | --all)
            set_bashrc
            set_ssh
            set_vim
            set_git
            set_bashmarks
            set_perlbrew
            install_packages
            ;;
        -h | --help) print_help;;
        *) echo "Invalid option: $1" && print_help
    esac
    shift
done
