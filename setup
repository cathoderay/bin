#!/bin/bash
#
# File: setup
# Description: setup environment
# Author: Ronald Kaiser <raios DOT catodicos AT gmail DOT com>
#

CONF="$HOME/bin/conf"
DOTFILES="$HOME/bin/dotfiles"

. $DOTFILES/bash/config # color codes, etc
. $DOTFILES/bash/aliases # helper functions


task() {
    echo "" && pbyellow "[ $1 ]"
}

subtask() {
    pbpurple ">[ $1 ]"
}

subtask_done() {
    pbgreen "subtask done!"
}

task_done() {
    pbgreen "task done!"
}

set_link() {
    local SRC="$1"
    local TGT="$2"

    if [ -s "$SRC" ]; then
        if [ -L "$SRC" ] && [ "$(readlink $SRC)" = "$TGT" ]; then
            pgreen "$SRC already configured.";
            return 0
        fi
        pred "$SRC already exists."
        return 1
    fi
    ln -s $TGT $SRC && pgreen "$SRC configured!"
}

set_ssh() {
    task ssh
    mkdir -p $HOME/.ssh &&
    set_link "$HOME/.ssh/config" "$DOTFILES/ssh/config" && task_done
}

set_pathogen() {
    subtask pathogen
    if [ -d $HOME/.vim/autoload ]; then
        pgreen "pathogen already configured."
        subtask_done
        return 0
    fi
    mkdir -p $HOME/.vim/autoload &&
    wget http://github.com/tpope/vim-pathogen/raw/master/autoload/pathogen.vim -O $HOME/.vim/autoload/pathogen.vim &&
    subtask_done
}

set_plugins() {
    subtask plugins
    BUNDLE="$HOME/.vim/bundle"
    mkdir -p $BUNDLE &&
    cd $BUNDLE &&
    cat $CONF/plugins.vim | while read line
    do
        local PLUGIN=$($(echo basename $line) | sed 's/\(.*\).git$/\1/g')
        if [ ! -d "$PLUGIN" ]; then
            git clone $line &&
            pgreen "$PLUGIN configured!"
        else
            pgreen "$PLUGIN already configured."
        fi
    done &&
    cd - &&
    subtask_done
}

set_vim() {
    task vim
    set_link "$HOME/.vimrc" "$DOTFILES/vim/vimrc" &&
    set_pathogen &&
    set_plugins &&
    task_done
}

set_git() {
    task git
    set_link "$HOME/.gitconfig" "$DOTFILES/git/gitconfig" && task_done
}

add_line() {
    local LINE="$1"
    local FILE="$2"

    if [ ! -f "$FILE" ]; then
        pred "$FILE does not exist."
        return 1
    fi
    grep "$LINE" "$FILE"
    if [ ! "$?" = 0 ]; then
        echo "$LINE" >> "$FILE"
        if [ "$?" = 0 ]; then
            pgreen "'$LINE' appended to $FILE!"
        else
            return 1
        fi
    else
        pgreen "'$LINE' already exists in $FILE."
    fi
}

set_bashmarks() {
    task bashmarks
    if [ -s $HOME/.local/bin/bashmarks.sh ]; then
        pgreen "bashmarks already installed."
        return 0
    fi
    git clone git://github.com/huyng/bashmarks.git /tmp/bashmarks
    if [ ! "$?" = 0 ]; then
        pred "Problem during repository cloning"
        return 1
    fi

    cd /tmp/bashmarks &&
        make install >/dev/null &&
        add_line ". $HOME/.local/bin/bashmarks.sh" "$DOTFILES/bashrc" &&
        cd - &&
        rm -rf /tmp/bashmarks &&
        task_done
}

set_bashrc() {
    task bashrc
    touch $HOME/.bashrc &&
        add_line ". $DOTFILES/bashrc" $HOME/.bashrc &&
        task_done
}

set_perlbrew() {
    task perlbrew
    command_exists perlbrew
    if [ "$?" = 0 ]; then
        pgreen "perlbrew already configured."
        task_done
        return 0
    fi
    curl -kLO http://xrl.us/perlbrew &&
    perl perlbrew self-install &&
    $HOME/perl5/perlbrew/bin/perlbrew init &&
    add_line ". $HOME/perl5/perlbrew/etc/bashrc" "$DOTFILES/bashrc" &&
    rm perlbrew &&
    task_done
}

set_pythonbrew() {
    task pythonbrew
    command_exists pythonbrew
    if [ "$?" = 0 ]; then
        pgreen "pythonbrew already configured."
        task_done
        return 0
    fi
    curl -kL http://xrl.us/pythonbrewinstall | bash &&
    add_line ". $HOME/.pythonbrew/etc/bashrc" "$DOTFILES/bashrc" &&
    task_done
}

install_packages() {
    task packages
    uname -v | grep Ubuntu
    if [ "$?" = 0 ]; then
        sudo apt-get install $(cat $CONF/packages.debian) &&
        task_done &&
        return 0
    fi
    pred "Don't know this OS"
}

print_help() {
    echo "Usage: $(basename $0) [OPTIONS]

OPTIONS:
    -a, --all
    -r, --bashrc
    -v, --vim
    -s, --ssh
    -g, --git
    -k, --bashmarks
    -b, --perlbrew
    -p, --packages
    -h, --help"
}

while [ -n "$1" ]
do
    case $1 in
        -r | --bashrc) set_bashrc ;;
        -s | --ssh) set_ssh ;;
        -v | --vim) set_vim ;;
        -g | --git) set_git ;;
        -k | --bashmarks) set_bashmarks ;;
        -b | --perlbrew) set_perlbrew ;;
        -y | --pythonbrew) set_pythonbrew ;;
        -p | --packages) install_packages ;;
        -a | --all)
            set_bashrc
            set_ssh
            set_vim
            set_git
            set_bashmarks
            set_pythonbrew
            set_perlbrew
            install_packages
            ;;
        -h | --help) print_help;;
        *) echo "Invalid option: $1" && print_help
    esac
    shift
done
